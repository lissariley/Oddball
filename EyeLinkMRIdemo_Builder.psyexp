<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2023.2.3">
  <Settings>
    <Param val="use prefs" valType="str" updates="None" name="Audio latency priority"/>
    <Param val="use prefs" valType="str" updates="None" name="Audio lib"/>
    <Param val="" valType="str" updates="None" name="Completed URL"/>
    <Param val="auto" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data' + os.sep + '%s_%s' % (expInfo['participant'], expInfo['date'])" valType="code" updates="None" name="Data filename"/>
    <Param val="True" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="" valType="str" updates="None" name="End Message"/>
    <Param val="{'participant': '999', 'age': '38', 'tracking': '0', 'scanning': '0', 'practice': '0'}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="True" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="html" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="packaged" valType="str" updates="None" name="JS libs"/>
    <Param val="testMonitor" valType="str" updates="None" name="Monitor"/>
    <Param val="[]" valType="list" updates="None" name="Resources"/>
    <Param val="False" valType="bool" updates="None" name="Save csv file"/>
    <Param val="True" valType="bool" updates="None" name="Save excel file"/>
    <Param val="False" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="True" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="True" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="1" valType="num" updates="None" name="Screen"/>
    <Param val="True" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="False" valType="bool" updates="None" name="Show mouse"/>
    <Param val="pix" valType="str" updates="None" name="Units"/>
    <Param val="" valType="str" updates="None" name="Use version"/>
    <Param val="[1920, 1080]" valType="code" updates="None" name="Window size (pixels)"/>
    <Param val="none" valType="str" updates="None" name="backgroundFit"/>
    <Param val="" valType="str" updates="None" name="backgroundImg"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="{'thisRow.t': 'priority.CRITICAL', 'expName': 'priority.LOW'}" valType="dict" updates="None" name="colPriority"/>
    <Param val="[0.3082,0.3536,0.2946]" valType="str" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_2" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_AREA" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="RIGHT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="oddball_with_tracking" valType="str" updates="None" name="expName"/>
    <Param val="on Sync" valType="str" updates="None" name="exportHTML"/>
    <Param val="None" valType="str" updates="None" name="eyetracker"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="PsychToolbox" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="debug" valType="code" updates="None" name="logging level"/>
    <Param val="('MIDDLE_BUTTON',)" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="neon.local" valType="str" updates="None" name="plCompanionAddress"/>
    <Param val="scene_camera.json" valType="file" updates="None" name="plCompanionCameraCalibration"/>
    <Param val="8080" valType="num" updates="None" name="plCompanionPort"/>
    <Param val="True" valType="bool" updates="None" name="plCompanionRecordingEnabled"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="True" valType="bool" updates="None" name="plPupilCaptureRecordingEnabled"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="time" valType="str" updates="None" name="sortColumns"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="" valType="str" updates="None" name="tbModel"/>
    <Param val="60" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
    <Param val="pyglet" valType="str" updates="None" name="winBackend"/>
  </Settings>
  <Routines>
    <Routine name="trial">
      <RoutineSettingsComponent name="trial" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="trial" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="elTrial" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="if int(expInfo['tracking'])==1:&amp;#10;# This Begin Routine tab of the elTrial component resets some &amp;#10;# variables that are used to keep track of whether certain trial events have&amp;#10;# happened and sends trial variable messages to the EDF to mark condition&amp;#10;# information&amp;#10;&amp;#10;# these variables keep track of whether the fixation presentation, image &amp;#10;# presentation, and trial response have occured yet (0 = no, 1 = yes).&amp;#10;# They later help us to ensure that each event marking message only gets&amp;#10;# sent once, at the time of each event&amp;#10;    sentResponseMessage = 0&amp;#10;    sentFixationMessage = 0&amp;#10;    sentBallMessage = 0&amp;#10;&amp;#10;# create a keyboard instance and reinitialize a kePressNameList, which &amp;#10;# will store list of key names currently being pressed (to allow Ctrl-C abort)&amp;#10;    kb = keyboard.Keyboard()&amp;#10;    keyPressNameList = list()&amp;#10;&amp;#10;# send a &quot;TRIALID&quot; message to mark the start of a trial, see Data&amp;#10;# Viewer User Manual, &quot;Protocol for EyeLink Data to Viewer Integration&quot;&amp;#10;# Skip this message for the first trial&amp;#10;    if trial_index &gt; 1:&amp;#10;        el_tracker.sendMessage('TRIALID %d' % trial_index)&amp;#10;    &amp;#10;# record trial variables to the EDF data file, for details, see Data&amp;#10;# Viewer User Manual, &quot;Protocol for EyeLink Data to Viewer Integration&quot;&amp;#10;    el_tracker.sendMessage('!V TRIAL_VAR stim_type %s' % stim_type)&amp;#10;    el_tracker.sendMessage('!V TRIAL_VAR stim_name %s' % stim_name)&amp;#10;    el_tracker.sendMessage('!V TRIAL_VAR stim_size %s' % stim_size)&amp;#10;    el_tracker.sendMessage('!V TRIAL_VAR RGB %s' % RGB)&amp;#10;&amp;#10;# if sending many messages in a row, add a 1 msec pause between after &amp;#10;# every 5 messages or so&amp;#10;    time.sleep(0.001)&amp;#10;    el_tracker.sendMessage('!V TRIAL_VAR corrAns %s' % corrAns)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="if int(expInfo['tracking'])==1:&amp;#10;&amp;#10;# This Each Frame tab of the elTrial component handles the marking&amp;#10;# of experimental events via messages to the EDF, sends additional messages&amp;#10;# to allow visualization of trial stimuli in Data Viewer, logs trial variable&amp;#10;# information associated with responses and stimulus timing, and checks whether&amp;#10;# the eye tracker is still properly recording (and aborts the trial if not)&amp;#10;&amp;#10;# if a key was presssed, calculate the difference between the current time &amp;#10;# and the time of the key press onset. &amp;#10;# This offset value will be sent at the beginning of the message&amp;#10;# and will automatically be subtracted by Data Viewer from the timestamp&amp;#10;# of the message to position the message at the correct point in time&amp;#10;# then send a message marking the event&amp;#10;    if not isinstance(resp.rt,list) and sentResponseMessage == 0:&amp;#10;        offsetValue = int(round((globalClock.getTime() - \&amp;#10;            (resp.tStartRefresh + resp.rt))*1000))&amp;#10;        el_tracker.sendMessage('%i KEY_PRESSED' % offsetValue)&amp;#10;&amp;#10;    # after every few messages, include a 1 msec delay to ensure&amp;#10;    # that no messages are missed &amp;#10;        time.sleep(0.001)&amp;#10;        el_tracker.sendMessage('!V TRIAL_VAR accuracy %i' % resp.corr)&amp;#10;        el_tracker.sendMessage('!V TRIAL_VAR keyPressed %s' % resp.keys)&amp;#10;&amp;#10;    # log that the response message has been written so that we don't &amp;#10;    # write it again on future frames&amp;#10;        sentResponseMessage = 1&amp;#10;&amp;#10;#Check whether it is the first frame of the fixation presentation&amp;#10;    if fixation.tStartRefresh is not None and sentFixationMessage == 0:&amp;#10;    &amp;#10;    # send a message marking the fixation onset event&amp;#10;        el_tracker.sendMessage('FIXATION_ONSET')&amp;#10;    &amp;#10;    # send some Data Viewer drawing commands so that you can see a representation&amp;#10;    # of the fixation cross in Data Viewer's various visualizations&amp;#10;    # For more information on this, see section &quot;Protocol for EyeLink Data to &amp;#10;    # Viewer Integration&quot; section of the Data Viewer User Manual (Help -&gt; Contents)&amp;#10;        el_tracker.sendMessage('!V CLEAR 128 128 128')&amp;#10;        el_tracker.sendMessage('!V DRAWLINE 255 255 255 %i %i %i %i' % \&amp;#10;            (scn_width/2 - 25,scn_height/2,scn_width/2 + 25,\&amp;#10;            scn_height/2))  &amp;#10;        el_tracker.sendMessage('!V DRAWLINE 255 255 255 %i %i %i %i' % \&amp;#10;            (scn_width/2,scn_height/2 - 25,scn_width/2,\&amp;#10;            scn_height/2 + 25)) &amp;#10;        &amp;#10;    # log the fixation onset time (in Display PC time) as a Trial Variable&amp;#10;        fixationTime = fixation.tStartRefresh*1000&amp;#10;        el_tracker.sendMessage('!V TRIAL_VAR fixationTime %i' % fixationTime)&amp;#10;    &amp;#10;    # set this variable to 1 to ensure we don't write the event message/&amp;#10;    # draw command messages again on future frames&amp;#10;        sentFixationMessage = 1&amp;#10;&amp;#10;# Check whether it is the first frame of the image presentation&amp;#10;    if ball.tStartRefresh is not None and sentBallMessage == 0:&amp;#10;&amp;#10;    # send a message marking the image onset event&amp;#10;        el_tracker.sendMessage('IMAGE_ONSET')  &amp;#10;&amp;#10;    # send some Data Viewer drawing commands so that you can see the trial image&amp;#10;    # in Data Viewer's various visualizations&amp;#10;    # For more information on this, see section &quot;Protocol for EyeLink Data to &amp;#10;    # Viewer Integration&quot; section of the Data Viewer User Manual (Help -&gt; Contents)&amp;#10;        el_tracker.sendMessage('!V CLEAR 128 128 128')&amp;#10;        el_tracker.sendMessage('!V IMGLOAD CENTER ../../%s %i %i' % \&amp;#10;            (ball,scn_width/2,scn_height/2)) &amp;#10;        &amp;#10;    #log the image onset time (in Display PC time) as a Trial Variable&amp;#10;        imageTime = ball.tStartRefresh*1000&amp;#10;        el_tracker.sendMessage('!V TRIAL_VAR imageTime %i' % imageTime)&amp;#10;    &amp;#10;    # set this variable to 1 to ensure we don't write the event message/&amp;#10;    # image load messages again on future frames&amp;#10;        sentImageMessage = 1&amp;#10;&amp;#10;# abort the current trial if the tracker is no longer recording&amp;#10;    error = el_tracker.isRecording()&amp;#10;    if error is not pylink.TRIAL_OK:&amp;#10;        el_tracker.sendMessage('tracker_disconnected')&amp;#10;        abort_trial(win)&amp;#10;&amp;#10;# check keyboard events and then check to see if abort key combination (Ctrl-C) pressed&amp;#10;    keyPressList = kb.getKeys(keyList = ['lctrl','rctrl','c'], waitRelease = False, clear = False)&amp;#10;    for keyPress in keyPressList:&amp;#10;        keyPressName = keyPress.name&amp;#10;        if keyPressName not in keyPressNameList:&amp;#10;            keyPressNameList.append(keyPress.name)&amp;#10;    if ('lctrl' in keyPressNameList or 'rctrl' in keyPressNameList) and 'c' in keyPressNameList:&amp;#10;        el_tracker.sendMessage('terminated_by_user')&amp;#10;        terminate_task(genv,edf_file,session_folder,session_identifier)&amp;#10;#check for key releases&amp;#10;    keyReleaseList = kb.getKeys(keyList = ['lctrl','rctrl','c'], waitRelease = True, clear = False)&amp;#10;    for keyRelease in keyReleaseList:&amp;#10;        keyReleaseName = keyRelease.name&amp;#10;        if keyReleaseName in keyPressNameList:&amp;#10;            keyPressNameList.remove(keyReleaseName)&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="if int(expInfo['tracking'])==1:&amp;#10;# This End Routine tab of the elTrial component clears the screen and logs&amp;#10;# an additional message to mark the end of the trial&amp;#10;&amp;#10;# clear the screen&amp;#10;    clear_screen(win,genv)&amp;#10;    el_tracker.sendMessage('blank_screen')&amp;#10;# send a message to clear the Data Viewer screen as well&amp;#10;    el_tracker.sendMessage('!V CLEAR 128 128 128')&amp;#10;    &amp;#10;# send a 'TRIAL_RESULT' message to mark the end of trial, see Data&amp;#10;# Viewer User Manual, &quot;Protocol for EyeLink Data to Viewer Integration&quot;&amp;#10;    el_tracker.sendMessage('TRIAL_RESULT %d' % 0)&amp;#10;&amp;#10;# update the trial counter for the next trial&amp;#10;    trial_index = trial_index + 1&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="elTrial" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <KeyboardComponent name="resp" plugin="None">
        <Param val="&quot;1&quot;" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="$corrAns" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="resp" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="trial_length" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="True" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <PolygonComponent name="fixation" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="black" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="black" valType="color" updates="constant" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="fixation" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="circle" valType="str" updates="None" name="shape"/>
        <Param val="(0.15, 0.15)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.075" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="trial_length" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="deg" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="ball" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="$RGB" valType="color" updates="set every repeat" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="$RGB" valType="color" updates="set every repeat" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="200" valType="int" updates="constant" name="nVertices"/>
        <Param val="ball" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="regular polygon..." valType="str" updates="None" name="shape"/>
        <Param val="stim_size" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.075" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="deg" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
    </Routine>
    <Routine name="instruct">
      <RoutineSettingsComponent name="instruct" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="instruct" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="taskInstructions" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="50" valType="num" updates="constant" name="letterHeight"/>
        <Param val="taskInstructions" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="num" updates="None" name="startVal"/>
        <Param val="duration (frames)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="num" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Ready?&amp;#10;&amp;#10;Press space to continue." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="ready" plugin="None">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="thisTrial.corrAns" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="ready" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="thanks">
      <RoutineSettingsComponent name="thanks" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="thanks" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="endScreen" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="50" valType="num" updates="constant" name="letterHeight"/>
        <Param val="endScreen" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="2" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="This is the end of the experiment.&amp;#10;&amp;#10;Thanks!" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="eyelinkSetup">
      <RoutineSettingsComponent name="eyelinkSetup" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="eyelinkSetup" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="elInstructions" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="50" valType="num" updates="constant" name="letterHeight"/>
        <Param val="elInstructions" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="num" updates="None" name="startVal"/>
        <Param val="time (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="num" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="If using eyetracking, press any key to enter camera setup" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp" plugin="None">
        <Param val="" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="num" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="elConnect" plugin="None">
        <Param val="# DESCRIPTION:&amp;#10;# This is a basic example illustrating how to do continuous eye tracker &amp;#10;# recording through a block of trials (e.g., in an MRI setup), and how to &amp;#10;# synchronize the presentation of trials with a sync signal from the MRI. With &amp;#10;# a long recording, we start and stop recording at the beginning and end of a &amp;#10;# testing session (block/run), rather than at the beginning and end of each &amp;#10;# experimental trial. We still send the TRIALID and TRIAL_RESULT messages to &amp;#10;# the tracker, and Data Viewer will still be able to segment the long recording &amp;#10;# into small segments (trials).&amp;#10;&amp;#10;# The code components in the eyelinkSetup, eyelinkStartRecording, trial, and &amp;#10;# eyelinkStopRecording routines handle communication with the Host PC/EyeLink&amp;#10;# system.  All the code components are set to Code Type Py, and each code &amp;#10;# component may have code in the various tabs (e.g., Before Experiment, Begin&amp;#10;# Experiment, etc.)&amp;#10;&amp;#10;# Last updated: October 27 2023&amp;#10;&amp;#10;# This Before Experiment tab of the elConnect component imports some&amp;#10;# modules we need, manages data filenames, allows for dummy mode configuration&amp;#10;# (for testing), connects to the Host PC, and defines some helper function &amp;#10;# definitions (which are called later)&amp;#10;&amp;#10;import pylink&amp;#10;import time&amp;#10;import platform&amp;#10;from PIL import Image  # for preparing the Host backdrop image&amp;#10;from EyeLinkCoreGraphicsPsychoPy import EyeLinkCoreGraphicsPsychoPy&amp;#10;from string import ascii_letters, digits&amp;#10;from psychopy import gui&amp;#10;&amp;#10;# Switch to the script folder&amp;#10;script_path = os.path.dirname(sys.argv[0])&amp;#10;if len(script_path) != 0:&amp;#10;    os.chdir(script_path)&amp;#10;&amp;#10;# Set this variable to True if you use the built-in retina screen as your&amp;#10;# primary display device on macOS. If have an external monitor, set this&amp;#10;# variable True if you choose to &quot;Optimize for Built-in Retina Display&quot;&amp;#10;# in the Displays preference settings.&amp;#10;use_retina = False&amp;#10;&amp;#10;# Set this variable to True to run the script in &quot;Dummy Mode&quot;&amp;#10;dummy_mode = False&amp;#10;&amp;#10;# Set up EDF data file name and local data folder&amp;#10;#&amp;#10;# The EDF data filename should not exceed 8 alphanumeric characters&amp;#10;# use ONLY number 0-9, letters, &amp; _ (underscore) in the filename&amp;#10;edf_fname = 'TEST'&amp;#10;&amp;#10;# Prompt user to specify an EDF data filename&amp;#10;# before we open a fullscreen window&amp;#10;dlg_title = 'Enter EDF File Name'&amp;#10;dlg_prompt = 'Please enter a file name with 8 or fewer characters\n' + \&amp;#10;             '[letters, numbers, and underscore].'&amp;#10;# loop until we get a valid filename&amp;#10;while True:&amp;#10;    dlg = gui.Dlg(dlg_title)&amp;#10;    dlg.addText(dlg_prompt)&amp;#10;    dlg.addField('File Name:', edf_fname)&amp;#10;    # show dialog and wait for OK or Cancel&amp;#10;    ok_data = dlg.show()&amp;#10;    if dlg.OK:  # if ok_data is not None&amp;#10;        print('EDF data filename: {}'.format(ok_data[0]))&amp;#10;    else:&amp;#10;        print('user cancelled')&amp;#10;        core.quit()&amp;#10;        sys.exit()&amp;#10;&amp;#10;    # get the string entered by the experimenter&amp;#10;    tmp_str = dlg.data[0]&amp;#10;    # strip trailing characters, ignore the &quot;.edf&quot; extension&amp;#10;    edf_fname = tmp_str.rstrip().split('.')[0]&amp;#10;&amp;#10;    # check if the filename is valid (length &lt;= 8 &amp; no special char)&amp;#10;    allowed_char = ascii_letters + digits + '_'&amp;#10;    if not all([c in allowed_char for c in edf_fname]):&amp;#10;        print('ERROR: Invalid EDF filename')&amp;#10;    elif len(edf_fname) &gt; 8:&amp;#10;        print('ERROR: EDF filename should not exceed 8 characters')&amp;#10;    else:&amp;#10;        break&amp;#10;        &amp;#10;# Set up a folder to store the EDF data files and the associated resources&amp;#10;# e.g., files defining the interest areas used in each trial&amp;#10;results_folder = 'results'&amp;#10;if not os.path.exists(results_folder):&amp;#10;    os.makedirs(results_folder)&amp;#10;&amp;#10;# We download EDF data file from the EyeLink Host PC to the local hard&amp;#10;# drive at the end of each testing session, here we rename the EDF to&amp;#10;# include session start date/time&amp;#10;time_str = time.strftime(&quot;_%Y_%m_%d_%H_%M&quot;, time.localtime())&amp;#10;session_identifier = edf_fname + time_str&amp;#10;&amp;#10;# create a folder for the current testing session in the &quot;results&quot; folder&amp;#10;session_folder = os.path.join(results_folder, session_identifier)&amp;#10;if not os.path.exists(session_folder):&amp;#10;    os.makedirs(session_folder)&amp;#10;&amp;#10;# For macOS users check if they have a retina screen&amp;#10;if 'Darwin' in platform.system():&amp;#10;        dlg = gui.Dlg(&quot;Retina Screen?&quot;)&amp;#10;        dlg.addText(&quot;Will the task run on a Retina or a non-Retina screen?&quot;)&amp;#10;        dlg.addField(&quot;Screen Type:&quot;, choices=[&quot;Not Retina&quot;,&quot;Retina&quot;])&amp;#10;        # show dialog and wait for OK or Cancel&amp;#10;        ok_data = dlg.show()&amp;#10;        if dlg.OK:&amp;#10;            if dlg.data[0] == &quot;Retina&quot;:  &amp;#10;                use_retina = True&amp;#10;            else:&amp;#10;                use_retina = False&amp;#10;        else:&amp;#10;            print('user cancelled')&amp;#10;            core.quit()&amp;#10;            sys.exit()&amp;#10;&amp;#10;&amp;#10;# Step 1: Connect to the EyeLink Host PC&amp;#10;#&amp;#10;# The Host IP address, by default, is &quot;100.1.1.1&quot;.&amp;#10;# the &quot;el_tracker&quot; objected created here can be accessed through the Pylink&amp;#10;# Set the Host PC address to &quot;None&quot; (without quotes) to run the script&amp;#10;# in &quot;Dummy Mode&quot;&amp;#10;if dummy_mode:&amp;#10;    el_tracker = pylink.EyeLink(None)&amp;#10;else:&amp;#10;    try:&amp;#10;        el_tracker = pylink.EyeLink(&quot;100.1.1.1&quot;)&amp;#10;    except RuntimeError as error:&amp;#10;        dlg = gui.Dlg(&quot;Dummy Mode?&quot;)&amp;#10;        dlg.addText(&quot;Couldn't connect to tracker at 100.1.1.1 -- continue in Dummy Mode?&quot;)&amp;#10;        # show dialog and wait for OK or Cancel&amp;#10;        ok_data = dlg.show()&amp;#10;        if dlg.OK:  # if ok_data is not None&amp;#10;            dummy_mode = True&amp;#10;            el_tracker = pylink.EyeLink(None)&amp;#10;        else:&amp;#10;            print('user cancelled')&amp;#10;            core.quit()&amp;#10;            sys.exit()&amp;#10;&amp;#10;# Define some helper functions for screen drawing &amp;#10;# and exiting trials/sessions early&amp;#10;def clear_screen(win,genv):&amp;#10;    &quot;&quot;&quot; clear up the PsychoPy window&quot;&quot;&quot;&amp;#10;    win.fillColor = genv.getBackgroundColor()&amp;#10;    win.flip()&amp;#10;&amp;#10;def show_msg(win, genv, text, wait_for_keypress=True):&amp;#10;    &quot;&quot;&quot; Show task instructions on screen&quot;&quot;&quot;&amp;#10;    scn_width, scn_height = win.size&amp;#10;    msg = visual.TextStim(win, text,&amp;#10;                          color=genv.getForegroundColor(),&amp;#10;                          wrapWidth=scn_width/2)&amp;#10;    clear_screen(win,genv)&amp;#10;    msg.draw()&amp;#10;    win.flip()&amp;#10;&amp;#10;    # wait indefinitely, terminates upon any key press&amp;#10;    if wait_for_keypress:&amp;#10;        kb = keyboard.Keyboard()&amp;#10;        #keys = kb.getKeys(['Enter'], waitRelease=False)&amp;#10;        waitKeys = kb.waitKeys(keyList=None, waitRelease=True, clear=True)&amp;#10;        clear_screen(win,genv)&amp;#10;&amp;#10;def terminate_task(genv,edf_file,session_folder,session_identifier):&amp;#10;    &quot;&quot;&quot; Terminate the task gracefully and retrieve the EDF data file&amp;#10;    &quot;&quot;&quot;&amp;#10;    el_tracker = pylink.getEYELINK()&amp;#10;&amp;#10;    if el_tracker.isConnected():&amp;#10;        # Terminate the current trial first if the task terminated prematurely&amp;#10;        error = el_tracker.isRecording()&amp;#10;        if error == pylink.TRIAL_OK:&amp;#10;            abort_trial()&amp;#10;&amp;#10;        # Put tracker in Offline mode&amp;#10;        el_tracker.setOfflineMode()&amp;#10;&amp;#10;        # Clear the Host PC screen and wait for 500 ms&amp;#10;        el_tracker.sendCommand('clear_screen 0')&amp;#10;        pylink.msecDelay(500)&amp;#10;&amp;#10;        # Close the edf data file on the Host&amp;#10;        el_tracker.closeDataFile()&amp;#10;&amp;#10;        # Show a file transfer message on the screen&amp;#10;        msg = 'EDF data is transferring from EyeLink Host PC...'&amp;#10;        show_msg(win, genv, msg, wait_for_keypress=False)&amp;#10;&amp;#10;        # Download the EDF data file from the Host PC to a local data folder&amp;#10;        # parameters: source_file_on_the_host, destination_file_on_local_drive&amp;#10;        local_edf = os.path.join(session_folder, session_identifier + '.EDF')&amp;#10;        try:&amp;#10;            el_tracker.receiveDataFile(edf_file, local_edf)&amp;#10;        except RuntimeError as error:&amp;#10;            print('ERROR:', error)&amp;#10;&amp;#10;        # Close the link to the tracker.&amp;#10;        el_tracker.close()&amp;#10;&amp;#10;    # close the PsychoPy window&amp;#10;    win.close()&amp;#10;&amp;#10;    # quit PsychoPy&amp;#10;    core.quit()&amp;#10;    sys.exit()&amp;#10;&amp;#10;def abort_trial():&amp;#10;    &quot;&quot;&quot;Ends recording &quot;&quot;&quot;&amp;#10;    el_tracker = pylink.getEYELINK()&amp;#10;&amp;#10;    # Stop recording&amp;#10;    if el_tracker.isRecording():&amp;#10;        # add 100 ms to catch final trial events&amp;#10;        pylink.pumpDelay(100)&amp;#10;        el_tracker.stopRecording()&amp;#10;        &amp;#10;    # Send a message to clear the Data Viewer screen&amp;#10;    bgcolor_RGB = (128, 128, 128)&amp;#10;    el_tracker.sendMessage('!V CLEAR %d %d %d' % bgcolor_RGB)&amp;#10;&amp;#10;    # send a message to mark trial end&amp;#10;    el_tracker.sendMessage('TRIAL_RESULT %d' % pylink.TRIAL_ERROR)&amp;#10;&amp;#10;    return pylink.TRIAL_ERROR&amp;#10;" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="# This Begin Experiment tab of the elConnect component opens the EDF, gets graphic &amp;#10;# information from Psychopy, configures some eye tracker settings, logs the screen &amp;#10;# resolution for Data Viewer via a DISPLAY_COORDS message, and configures a &amp;#10;# graphics environment for eye tracker setup/calibration&amp;#10;if int(expInfo['tracking'])==0:&amp;#10;    print('*************************************************skipping elConnect')&amp;#10;    continueRoutine = False&amp;#10;elif int(expInfo['tracking'])==1:&amp;#10;    print('*************************************************proceeding with elConnect')&amp;#10;&amp;#10;el_tracker = pylink.getEYELINK()&amp;#10;# Step 2: Open an EDF data file on the Host PC&amp;#10;global edf_fname&amp;#10;edf_file = edf_fname + &quot;.EDF&quot;&amp;#10;try:&amp;#10;    el_tracker.openDataFile(edf_file)&amp;#10;except RuntimeError as err:&amp;#10;    print('ERROR:', err)&amp;#10;    # close the link if we have one open&amp;#10;    if el_tracker.isConnected():&amp;#10;        el_tracker.close()&amp;#10;    core.quit()&amp;#10;    sys.exit()&amp;#10;&amp;#10;# Add a header text to the EDF file to identify the current experiment name&amp;#10;# This is OPTIONAL. If your text starts with &quot;RECORDED BY &quot; it will be&amp;#10;# available in DataViewer's Inspector window by clicking&amp;#10;# the EDF session node in the top panel and looking for the &quot;Recorded By:&quot;&amp;#10;# field in the bottom panel of the Inspector.&amp;#10;preamble_text = 'RECORDED BY %s' % os.path.basename(__file__)&amp;#10;el_tracker.sendCommand(&quot;add_file_preamble_text '%s'&quot; % preamble_text)&amp;#10;&amp;#10;# Step 3: Configure the tracker&amp;#10;#&amp;#10;# Put the tracker in offline mode before we change tracking parameters&amp;#10;el_tracker.setOfflineMode()&amp;#10;&amp;#10;# Get the software version:  1-EyeLink I, 2-EyeLink II, 3/4-EyeLink 1000,&amp;#10;# 5-EyeLink 1000 Plus, 6-Portable DUO&amp;#10;eyelink_ver = 0  # set version to 0, in case running in Dummy mode&amp;#10;if not dummy_mode:&amp;#10;    vstr = el_tracker.getTrackerVersionString()&amp;#10;    eyelink_ver = int(vstr.split()[-1].split('.')[0])&amp;#10;    # print out some version info in the shell&amp;#10;    print('Running experiment on %s, version %d' % (vstr, eyelink_ver))&amp;#10;&amp;#10;# File and Link data control&amp;#10;# what eye events to save in the EDF file, include everything by default&amp;#10;file_event_flags = 'LEFT,RIGHT,FIXATION,SACCADE,BLINK,MESSAGE,BUTTON,INPUT'&amp;#10;# what eye events to make available over the link, include everything by default&amp;#10;link_event_flags = 'LEFT,RIGHT,FIXATION,SACCADE,BLINK,BUTTON,FIXUPDATE,INPUT'&amp;#10;# what sample data to save in the EDF data file and to make available&amp;#10;# over the link, include the 'HTARGET' flag to save head target sticker&amp;#10;# data for supported eye trackers&amp;#10;if eyelink_ver &gt; 3:&amp;#10;    file_sample_flags = 'LEFT,RIGHT,GAZE,HREF,RAW,AREA,HTARGET,GAZERES,BUTTON,STATUS,INPUT'&amp;#10;    link_sample_flags = 'LEFT,RIGHT,GAZE,GAZERES,AREA,HTARGET,STATUS,INPUT'&amp;#10;else:&amp;#10;    file_sample_flags = 'LEFT,RIGHT,GAZE,HREF,PUPIL,AREA,GAZERES,BUTTON,STATUS,INPUT'&amp;#10;    link_sample_flags = 'LEFT,RIGHT,GAZE,GAZERES,AREA,STATUS,INPUT'&amp;#10;el_tracker.sendCommand(&quot;file_event_filter = %s&quot; % file_event_flags)&amp;#10;el_tracker.sendCommand(&quot;file_sample_data = %s&quot; % file_sample_flags)&amp;#10;el_tracker.sendCommand(&quot;link_event_filter = %s&quot; % link_event_flags)&amp;#10;el_tracker.sendCommand(&quot;link_sample_data = %s&quot; % link_sample_flags)&amp;#10;&amp;#10;# Optional tracking parameters&amp;#10;# Sample rate, 250, 500, 1000, or 2000, check your tracker specification&amp;#10;# if eyelink_ver &gt; 2:&amp;#10;#     el_tracker.sendCommand(&quot;sample_rate 1000&quot;)&amp;#10;# Choose a calibration type, H3, HV3, HV5, HV13 (HV = horizontal/vertical),&amp;#10;el_tracker.sendCommand(&quot;calibration_type = HV9&quot;)&amp;#10;# Set a gamepad button to accept calibration/drift check target&amp;#10;# You need a supported gamepad/button box that is connected to the Host PC&amp;#10;el_tracker.sendCommand(&quot;button_function 5 'accept_target_fixation'&quot;)&amp;#10;&amp;#10;# get the native screen resolution used by PsychoPy&amp;#10;scn_width, scn_height = win.size&amp;#10;# resolution fix for Mac retina displays&amp;#10;if 'Darwin' in platform.system():&amp;#10;    if use_retina:&amp;#10;        scn_width = int(scn_width/2.0)&amp;#10;        scn_height = int(scn_height/2.0)&amp;#10;&amp;#10;# Pass the display pixel coordinates (left, top, right, bottom) to the tracker&amp;#10;# see the EyeLink Installation Guide, &quot;Customizing Screen Settings&quot;&amp;#10;el_coords = &quot;screen_pixel_coords = 0 0 %d %d&quot; % (scn_width - 1, scn_height - 1)&amp;#10;el_tracker.sendCommand(el_coords)&amp;#10;&amp;#10;# Write a DISPLAY_COORDS message to the EDF file&amp;#10;# Data Viewer needs this piece of info for proper visualization, see Data&amp;#10;# Viewer User Manual, &quot;Protocol for EyeLink Data to Viewer Integration&quot;&amp;#10;dv_coords = &quot;DISPLAY_COORDS  0 0 %d %d&quot; % (scn_width - 1, scn_height - 1)&amp;#10;el_tracker.sendMessage(dv_coords)  &amp;#10;    &amp;#10;# Configure a graphics environment (genv) for tracker calibration&amp;#10;genv = EyeLinkCoreGraphicsPsychoPy(el_tracker, win)&amp;#10;print(genv)  # print out the version number of the CoreGraphics library&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="# This End Experiment tab of the elConnect component calls the &amp;#10;# terminate_task helper function to get the EDF file and close the connection&amp;#10;# to the Host PC&amp;#10;&amp;#10;# Disconnect, download the EDF file, then terminate the task&amp;#10;if expInfo['tracking']==1:&amp;#10;    terminate_task(genv,edf_file,session_folder,session_identifier)&amp;#10;" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="if ((! dummy_mode)) {&amp;#10;    try {&amp;#10;        el_tracker.doTrackerSetup();&amp;#10;    } catch(err) {&amp;#10;        if ((err instanceof RuntimeError)) {&amp;#10;            console.log(&quot;ERROR:&quot;, err);&amp;#10;            el_tracker.exitCalibration();&amp;#10;        } else {&amp;#10;            throw err;&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="if int(expInfo['tracking'])==1:&amp;#10;&amp;#10;# This End Routine tab of the elConnect component configures some&amp;#10;# graphics options for calibration, and then performs a camera setup&amp;#10;# so that you can set up the eye tracker and calibrate/validate the participant&amp;#10;&amp;#10;# Set background and foreground colors for the calibration target&amp;#10;# in PsychoPy, (-1, -1, -1)=black, (1, 1, 1)=white, (0, 0, 0)=mid-gray&amp;#10;    foreground_color = (-1, -1, -1)&amp;#10;    background_color = tuple(win.color)&amp;#10;    genv.setCalibrationColors(foreground_color, background_color)&amp;#10;&amp;#10;    print('Got here: A')&amp;#10;&amp;#10;# Set up the calibration target&amp;#10;#&amp;#10;# The target could be a &quot;circle&quot; (default), a &quot;picture&quot;, a &quot;movie&quot; clip,&amp;#10;# or a rotating &quot;spiral&quot;. To configure the type of calibration target, set&amp;#10;# genv.setTargetType to &quot;circle&quot;, &quot;picture&quot;, &quot;movie&quot;, or &quot;spiral&quot;, e.g.,&amp;#10;# genv.setTargetType('picture')&amp;#10;#&amp;#10;# Use genv.setMovieTarget() to set a &quot;movie&quot; target&amp;#10;# genv.setMovieTarget(os.path.join('videos', 'calibVid.mov'))&amp;#10;&amp;#10;# Use a picture as the calibration target&amp;#10;    genv.setTargetType('picture')&amp;#10;    genv.setPictureTarget(os.path.join('images', 'fixTarget.bmp'))&amp;#10;&amp;#10;    print('Got here: B')&amp;#10;&amp;#10;# Configure the size of the calibration target (in pixels)&amp;#10;# this option applies only to &quot;circle&quot; and &quot;spiral&quot; targets&amp;#10;# genv.setTargetSize(24)&amp;#10;&amp;#10;# Beeps to play during calibration, validation and drift correction&amp;#10;# parameters: target, good, error&amp;#10;#     target -- sound to play when target moves&amp;#10;#     good -- sound to play on successful operation&amp;#10;#     error -- sound to play on failure or interruption&amp;#10;# Each parameter could be ''--default sound, 'off'--no sound, or a wav file&amp;#10;    genv.setCalibrationSounds('', '', '')&amp;#10;&amp;#10;# resolution fix for macOS retina display issues&amp;#10;    if use_retina:&amp;#10;        genv.fixMacRetinaDisplay()&amp;#10;&amp;#10;#clear the screen before we begin Camera Setup mode&amp;#10;    clear_screen(win,genv)&amp;#10;&amp;#10;    print('Got here: C')&amp;#10;&amp;#10;# Request Pylink to use the PsychoPy window we opened above for calibration&amp;#10;    pylink.openGraphicsEx(genv)&amp;#10;&amp;#10;    print('Got here: D')&amp;#10;&amp;#10;# Peform a Camera Setup (eye tracker calibration)&amp;#10;# skip this step if running the script in Dummy Mode&amp;#10;    if not dummy_mode:&amp;#10;        try:&amp;#10;            el_tracker.doTrackerSetup()&amp;#10;        except RuntimeError as err:&amp;#10;            print('ERROR:', err)&amp;#10;            el_tracker.exitCalibration()&amp;#10;    clear_screen(win,genv)&amp;#10;&amp;#10;    print('Got here: E')" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="elConnect" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="eyelinkStartRecording">
      <RoutineSettingsComponent name="eyelinkStartRecording" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="eyelinkStartRecording" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="elStartRecord" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="# This Begin Experiment tab of the elStartRecord component initializes some &amp;#10;# variables that are used to keep track of the current trial&amp;#10;# numbers&amp;#10;&amp;#10;trial_index = 1" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="haveSentImageOnsetMessage = 0;&amp;#10;el_tracker = pylink.getEYELINK();&amp;#10;el_tracker.setOfflineMode();&amp;#10;el_tracker.sendCommand(&quot;clear_screen 0&quot;);&amp;#10;im = Image.open(((script_path + &quot;/&quot;) + trialImage));&amp;#10;im = im.resize([scn_width, scn_height]);&amp;#10;img_pixels = im.load();&amp;#10;pixels = function () {&amp;#10;    var _pj_a = [], _pj_b = util.range(scn_height);&amp;#10;    for (var _pj_c = 0, _pj_d = _pj_b.length; (_pj_c &lt; _pj_d); _pj_c += 1) {&amp;#10;        var j = _pj_b[_pj_c];&amp;#10;        _pj_a.push(function () {&amp;#10;    var _pj_e = [], _pj_f = util.range(scn_width);&amp;#10;    for (var _pj_g = 0, _pj_h = _pj_f.length; (_pj_g &lt; _pj_h); _pj_g += 1) {&amp;#10;        var i = _pj_f[_pj_g];&amp;#10;        _pj_e.push(img_pixels[[i, j]]);&amp;#10;    }&amp;#10;    return _pj_e;&amp;#10;}&amp;#10;.call(this));&amp;#10;    }&amp;#10;    return _pj_a;&amp;#10;}&amp;#10;.call(this);&amp;#10;el_tracker.bitmapBackdrop(scn_width, scn_height, pixels, 0, 0, scn_width, scn_height, 0, 0, pylink.BX_MAXCONTRAST);&amp;#10;left = (Number.parseInt((scn_width / 2.0)) - 60);&amp;#10;top = (Number.parseInt((scn_height / 2.0)) - 60);&amp;#10;right = (Number.parseInt((scn_width / 2.0)) + 60);&amp;#10;bottom = (Number.parseInt((scn_height / 2.0)) + 60);&amp;#10;draw_cmd = `draw_filled_box ${left} ${top} ${right} ${bottom}`;&amp;#10;el_tracker.sendCommand(draw_cmd);&amp;#10;el_tracker.sendMessage(`TRIALID ${trial_index}`);&amp;#10;status_msg = `TRIAL number ${trial_index}`;&amp;#10;el_tracker.sendCommand(`record_status_message '${status_msg}`);&amp;#10;while ((! dummy_mode)) {&amp;#10;    if (((! el_tracker.isConnected()) || el_tracker.breakPressed())) {&amp;#10;        terminate_task();&amp;#10;    }&amp;#10;    try {&amp;#10;        error = el_tracker.doDriftCorrect(Number.parseInt((scn_width / 2.0)), Number.parseInt((scn_height / 2.0)), 1, 1);&amp;#10;        if ((error !== pylink.ESC_KEY)) {&amp;#10;            break;&amp;#10;        }&amp;#10;    } catch(e) {&amp;#10;    }&amp;#10;}&amp;#10;el_tracker.setOfflineMode();&amp;#10;try {&amp;#10;    el_tracker.startRecording(1, 1, 1, 1);&amp;#10;} catch(error) {&amp;#10;    if ((error instanceof RuntimeError)) {&amp;#10;        console.log(&quot;ERROR:&quot;, error);&amp;#10;        abort_trial();&amp;#10;    } else {&amp;#10;        throw error;&amp;#10;    }&amp;#10;}&amp;#10;pylink.pumpDelay(100);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="if int(expInfo['tracking'])==1:&amp;#10;    print('*************************************************proceeding with elStartRecord')&amp;#10;&amp;#10;# This Begin Routine tab of the elStartRecord component updates some &amp;#10;# variables that are used to keep track of the current trial and block &amp;#10;# numbers, draws some feedback graphics (a simple shape) on the &amp;#10;# Host PC, sends a trial start messages to the EDF, performs a &amp;#10;# drift check/drift correct, and starts eye tracker recording&amp;#10;&amp;#10;# get a reference to the currently active EyeLink connection&amp;#10;    el_tracker = pylink.getEYELINK()&amp;#10;&amp;#10;# put the tracker in the offline mode first&amp;#10;    el_tracker.setOfflineMode()&amp;#10;&amp;#10;# clear the host screen before we draw the backdrop&amp;#10;    el_tracker.sendCommand('clear_screen 0')&amp;#10;&amp;#10;# OPTIONAL: draw landmarks and texts on the Host screen&amp;#10;# In addition to backdrop image, You may draw simples on the Host PC to use&amp;#10;# as landmarks. For illustration purpose, here we draw some texts and a box&amp;#10;# For a list of supported draw commands, see the &quot;COMMANDS.INI&quot; file on the&amp;#10;# Host PC (under /elcl/exe)&amp;#10;    left = int(scn_width/2.0) - 60&amp;#10;    top = int(scn_height/2.0) - 60&amp;#10;    right = int(scn_width/2.0) + 60&amp;#10;    bottom = int(scn_height/2.0) + 60&amp;#10;    draw_cmd = 'draw_filled_box %d %d %d %d 1' % (left, top, right, bottom)&amp;#10;    el_tracker.sendCommand(draw_cmd)&amp;#10;&amp;#10;# send a &quot;TRIALID&quot; message to mark the start of a trial, see Data&amp;#10;# Viewer User Manual, &quot;Protocol for EyeLink Data to Viewer Integration&quot;&amp;#10;    el_tracker.sendMessage('TRIALID %d' % trial_index)&amp;#10;&amp;#10;# drift check&amp;#10;# we recommend drift-check at the beginning of each trial&amp;#10;# the doDriftCorrect() function requires target position in integers&amp;#10;# the last two arguments:&amp;#10;# draw_target (1-default, 0-draw the target then call doDriftCorrect)&amp;#10;# allow_setup (1-press ESCAPE to recalibrate, 0-not allowed)&amp;#10;&amp;#10;# Skip drift-check if running the script in Dummy Mode&amp;#10;    while not dummy_mode:&amp;#10;    # terminate the task if no longer connected to the tracker or&amp;#10;    # user pressed Ctrl-C to terminate the task&amp;#10;        if (not el_tracker.isConnected()) or el_tracker.breakPressed():&amp;#10;            terminate_task(genv,edf_file,session_folder,session_identifier)&amp;#10;    # drift-check and re-do camera setup if ESCAPE is pressed&amp;#10;        try:&amp;#10;            error = el_tracker.doDriftCorrect(int(scn_width/2.0),&amp;#10;                                          int(scn_height/2.0), 1, 1)&amp;#10;        # break following a success drift-check&amp;#10;            if error is not pylink.ESC_KEY:&amp;#10;                break&amp;#10;        except:&amp;#10;            pass&amp;#10;&amp;#10;# put tracker in idle/offline mode before recording&amp;#10;    el_tracker.setOfflineMode()&amp;#10;&amp;#10;# Start recording&amp;#10;# arguments: sample_to_file, events_to_file, sample_over_link,&amp;#10;# event_over_link (1-yes, 0-no)&amp;#10;    try:&amp;#10;        el_tracker.startRecording(1, 1, 1, 1)&amp;#10;    except RuntimeError as error:&amp;#10;        print(&quot;ERROR:&quot;, error)&amp;#10;        abort_trial()&amp;#10;&amp;#10;# Allocate some time for the tracker to cache some samples before allowing&amp;#10;# trial stimulus presentation to proceed&amp;#10;    pylink.pumpDelay(100)&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="elStartRecord" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="eyelinkStopRecording">
      <RoutineSettingsComponent name="eyelinkStopRecording" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="eyelinkStopRecording" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="elStopRecord" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="clear_screen(psychoJS.window);&amp;#10;el_tracker.sendMessage(&quot;blank_screen&quot;);&amp;#10;el_tracker.sendMessage(&quot;!V CLEAR 128 128 128&quot;);&amp;#10;offsetValue = Number.parseInt(Math.round(((core.getTime() - fixation.tStartRefresh) * 1000)));&amp;#10;el_tracker.sendMessage(`${offsetValue}`);&amp;#10;el_tracker.sendMessage(`${offsetValue}`);&amp;#10;el_tracker.sendMessage(`${offsetValue} !V DRAWLINE 255 255 255 ${((scn_width / 2) - 50)} ${(scn_height / 2)} ${((scn_width / 2) + 50)} ${(scn_height / 2)}`);&amp;#10;el_tracker.sendMessage(`${offsetValue} !V DRAWLINE 255 255 255 ${(scn_width / 2)} ${((scn_height / 2) - 50)} ${(scn_width / 2)} ${((scn_height / 2) + 50)}`);&amp;#10;offsetValue = Number.parseInt(Math.round(((core.getTime() - image.tStartRefresh) * 1000)));&amp;#10;el_tracker.sendMessage(`${offsetValue}`);&amp;#10;el_tracker.sendMessage(`${offsetValue}`);&amp;#10;el_tracker.sendMessage(`${offsetValue} !V IMGLOAD CENTER ../../${trialImage} ${(scn_width / 2)} ${(scn_height / 2)}`);&amp;#10;if ((! (resp.rt instanceof list))) {&amp;#10;    offsetValue = Number.parseInt(Math.round(((core.getTime() - (image.tStartRefresh + resp.rt)) * 1000)));&amp;#10;    el_tracker.sendMessage(`${offsetValue}`);&amp;#10;}&amp;#10;pylink.pumpDelay(100);&amp;#10;el_tracker.stopRecording();&amp;#10;el_tracker.sendMessage(`!V TRIAL_VAR condition ${condition}`);&amp;#10;el_tracker.sendMessage(`!V TRIAL_VAR identifier ${identifier}`);&amp;#10;el_tracker.sendMessage(`!V TRIAL_VAR image ${trialImage}`);&amp;#10;el_tracker.sendMessage(`!V TRIAL_VAR condition ${condition}`);&amp;#10;el_tracker.sendMessage(`!V TRIAL_VAR corrAns ${corrAns}`);&amp;#10;pylink.pumpDelay(1);&amp;#10;el_tracker.sendMessage(`!V TRIAL_VAR accuracy ${resp.corr}`);&amp;#10;el_tracker.sendMessage(`!V TRIAL_VAR keyPressed ${resp.keys}`);&amp;#10;console.log(resp.rt.toString());&amp;#10;if ((resp.rt instanceof list)) {&amp;#10;    el_tracker.sendMessage(&quot;!V TRIAL_VAR RT -1&quot;);&amp;#10;} else {&amp;#10;    el_tracker.sendMessage(`!V TRIAL_VAR RT ${Number.parseInt(Math.round((resp.rt * 1000)))}`);&amp;#10;}&amp;#10;el_tracker.sendMessage(`TRIAL_RESULT ${0}`);&amp;#10;trial_index = (trial_index + 1);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="if expInfo['tracking']==1:&amp;#10;# This End Routine tab of the elStopRecord component stops eye tracker recording&amp;#10;&amp;#10;# stop recording; add 100 msec to catch final events before stopping&amp;#10;    pylink.pumpDelay(100)&amp;#10;    el_tracker.stopRecording()" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="elStopRecord" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="waitForScannerPulse">
      <RoutineSettingsComponent name="waitForScannerPulse" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="waitForScannerPulse" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="waitTriggerText" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="50" valType="num" updates="constant" name="letterHeight"/>
        <Param val="waitTriggerText" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="num" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Waiting for scanner..." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="keyTrigger" plugin="None">
        <Param val="'5'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="keyTrigger" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.25" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="logTriggerTime" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="if expInfo['tracking']==1:&amp;#10;&amp;#10;# This End Routine tab of the logTriggerTime component sends an event&amp;#10;# marking message for the trigger pulse signal and, importantly, logs the pulse&amp;#10;# time so that we can later write make it a trial variable (via TRIAL_VAR&amp;#10;# messages to the EDF on each trial)&amp;#10;&amp;#10;# If a key was presssed, calculate the difference between the current time &amp;#10;# and the time of the key press onset. This offset value will be sent at the &amp;#10;# beginning of the message and will automatically be subtracted by Data Viewer &amp;#10;# from the timestamp of the message to position the message at the correct point &amp;#10;# in time. Then send a message marking the event&amp;#10;    if not isinstance(keyTrigger.rt,list):&amp;#10;    &amp;#10;        offsetValue = int(round((globalClock.getTime() - \&amp;#10;            (keyTrigger.tStartRefresh + keyTrigger.rt))*1000))&amp;#10;        scanPulseTime = int(round((keyTrigger.tStartRefresh + keyTrigger.rt)*1000))&amp;#10;        el_tracker.sendMessage('%i SCAN_PULSE_RECEIVED' % offsetValue)" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="logTriggerTime" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="welcome">
      <RoutineSettingsComponent name="welcome" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="welcome" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="welcometext" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="50" valType="num" updates="constant" name="letterHeight"/>
        <Param val="welcometext" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Welcome to&amp;#10;the Oddball Task!&amp;#10;Remember, your job is to &amp;#10;press the button under&amp;#10;your first finger when&amp;#10;you see the LARGE circle." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="move_on_from_welcome" plugin="None">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="move_on_from_welcome" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="welcome"/>
    <Routine name="eyelinkSetup"/>
    <Routine name="instruct"/>
    <Routine name="eyelinkStartRecording"/>
    <Routine name="waitForScannerPulse"/>
    <LoopInitiator loopType="TrialHandler" name="trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('onset_time', 0.0), ('stim_type', 1), ('stim_name', 'targ'), ('trial_length', 0.5), ('stim_size', 3.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', 1.0)]), OrderedDict([('onset_time', 0.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 1.0), ('stim_type', 2), ('stim_name', 'bright'), ('trial_length', 4.0), ('stim_size', 1.6), ('RGB', [0.78, 0.61, 0.7]), ('corrAns', None)]), OrderedDict([('onset_time', 5.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 5.5), ('stim_type', 1), ('stim_name', 'targ'), ('trial_length', 1.0), ('stim_size', 3.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', 1.0)]), OrderedDict([('onset_time', 6.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 7.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 7.5), ('stim_type', 1), ('stim_name', 'targ'), ('trial_length', 2.0), ('stim_size', 3.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', 1.0)]), OrderedDict([('onset_time', 9.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 7.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 17.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 1.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 18.0), ('stim_type', 1), ('stim_name', 'targ'), ('trial_length', 2.0), ('stim_size', 3.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', 1.0)]), OrderedDict([('onset_time', 20.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 1.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 21.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 1.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 22.5), ('stim_type', 1), ('stim_name', 'targ'), ('trial_length', 4.0), ('stim_size', 3.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', 1.0)]), OrderedDict([('onset_time', 26.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 2.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 29.0), ('stim_type', 1), ('stim_name', 'targ'), ('trial_length', 1.0), ('stim_size', 3.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', 1.0)]), OrderedDict([('onset_time', 30.0), ('stim_type', 2), ('stim_name', 'bright'), ('trial_length', 1.0), ('stim_size', 1.6), ('RGB', [0.78, 0.61, 0.7]), ('corrAns', None)]), OrderedDict([('onset_time', 31.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 31.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 32.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 1.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 33.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 3.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 36.0), ('stim_type', 2), ('stim_name', 'bright'), ('trial_length', 3.5), ('stim_size', 1.6), ('RGB', [0.78, 0.61, 0.7]), ('corrAns', None)]), OrderedDict([('onset_time', 39.5), ('stim_type', 1), ('stim_name', 'targ'), ('trial_length', 1.0), ('stim_size', 3.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', 1.0)]), OrderedDict([('onset_time', 40.5), ('stim_type', 2), ('stim_name', 'bright'), ('trial_length', 1.0), ('stim_size', 1.6), ('RGB', [0.78, 0.61, 0.7]), ('corrAns', None)]), OrderedDict([('onset_time', 41.5), ('stim_type', 2), ('stim_name', 'bright'), ('trial_length', 9.0), ('stim_size', 1.6), ('RGB', [0.78, 0.61, 0.7]), ('corrAns', None)]), OrderedDict([('onset_time', 50.5), ('stim_type', 2), ('stim_name', 'bright'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.78, 0.61, 0.7]), ('corrAns', None)]), OrderedDict([('onset_time', 51.0), ('stim_type', 1), ('stim_name', 'targ'), ('trial_length', 5.0), ('stim_size', 3.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', 1.0)]), OrderedDict([('onset_time', 56.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 3.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 59.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 1.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 60.5), ('stim_type', 2), ('stim_name', 'bright'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.78, 0.61, 0.7]), ('corrAns', None)]), OrderedDict([('onset_time', 61.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 61.5), ('stim_type', 1), ('stim_name', 'targ'), ('trial_length', 1.0), ('stim_size', 3.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', 1.0)]), OrderedDict([('onset_time', 62.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 63.0), ('stim_type', 2), ('stim_name', 'bright'), ('trial_length', 3.5), ('stim_size', 1.6), ('RGB', [0.78, 0.61, 0.7]), ('corrAns', None)]), OrderedDict([('onset_time', 66.5), ('stim_type', 2), ('stim_name', 'bright'), ('trial_length', 2.5), ('stim_size', 1.6), ('RGB', [0.78, 0.61, 0.7]), ('corrAns', None)]), OrderedDict([('onset_time', 69.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 1.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 70.5), ('stim_type', 2), ('stim_name', 'bright'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.78, 0.61, 0.7]), ('corrAns', None)]), OrderedDict([('onset_time', 71.0), ('stim_type', 2), ('stim_name', 'bright'), ('trial_length', 3.0), ('stim_size', 1.6), ('RGB', [0.78, 0.61, 0.7]), ('corrAns', None)]), OrderedDict([('onset_time', 74.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 74.5), ('stim_type', 1), ('stim_name', 'targ'), ('trial_length', 3.5), ('stim_size', 3.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', 1.0)]), OrderedDict([('onset_time', 78.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 78.5), ('stim_type', 2), ('stim_name', 'bright'), ('trial_length', 1.5), ('stim_size', 1.6), ('RGB', [0.78, 0.61, 0.7]), ('corrAns', None)]), OrderedDict([('onset_time', 80.0), ('stim_type', 2), ('stim_name', 'bright'), ('trial_length', 3.0), ('stim_size', 1.6), ('RGB', [0.78, 0.61, 0.7]), ('corrAns', None)]), OrderedDict([('onset_time', 83.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 83.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 3.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 86.5), ('stim_type', 2), ('stim_name', 'bright'), ('trial_length', 4.5), ('stim_size', 1.6), ('RGB', [0.78, 0.61, 0.7]), ('corrAns', None)]), OrderedDict([('onset_time', 91.0), ('stim_type', 2), ('stim_name', 'bright'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.78, 0.61, 0.7]), ('corrAns', None)]), OrderedDict([('onset_time', 91.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 2.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 93.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 94.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 94.5), ('stim_type', 2), ('stim_name', 'bright'), ('trial_length', 3.0), ('stim_size', 1.6), ('RGB', [0.78, 0.61, 0.7]), ('corrAns', None)]), OrderedDict([('onset_time', 97.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 98.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 3.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 101.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 2.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 103.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 1.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 104.5), ('stim_type', 1), ('stim_name', 'targ'), ('trial_length', 1.5), ('stim_size', 3.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', 1.0)]), OrderedDict([('onset_time', 106.0), ('stim_type', 1), ('stim_name', 'targ'), ('trial_length', 4.0), ('stim_size', 3.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', 1.0)]), OrderedDict([('onset_time', 110.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 1.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 111.0), ('stim_type', 2), ('stim_name', 'bright'), ('trial_length', 2.5), ('stim_size', 1.6), ('RGB', [0.78, 0.61, 0.7]), ('corrAns', None)]), OrderedDict([('onset_time', 113.5), ('stim_type', 1), ('stim_name', 'targ'), ('trial_length', 2.5), ('stim_size', 3.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', 1.0)]), OrderedDict([('onset_time', 116.0), ('stim_type', 2), ('stim_name', 'bright'), ('trial_length', 7.0), ('stim_size', 1.6), ('RGB', [0.78, 0.61, 0.7]), ('corrAns', None)]), OrderedDict([('onset_time', 123.0), ('stim_type', 1), ('stim_name', 'targ'), ('trial_length', 2.5), ('stim_size', 3.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', 1.0)]), OrderedDict([('onset_time', 125.5), ('stim_type', 2), ('stim_name', 'bright'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.78, 0.61, 0.7]), ('corrAns', None)]), OrderedDict([('onset_time', 126.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 4.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 130.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 4.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 134.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 1.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 135.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 2.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 138.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 138.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 1.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 139.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 4.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 143.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 2.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 146.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 1.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 147.0), ('stim_type', 1), ('stim_name', 'targ'), ('trial_length', 2.0), ('stim_size', 3.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', 1.0)]), OrderedDict([('onset_time', 149.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 1.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 150.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 1.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 151.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 1.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 152.5), ('stim_type', 2), ('stim_name', 'bright'), ('trial_length', 1.0), ('stim_size', 1.6), ('RGB', [0.78, 0.61, 0.7]), ('corrAns', None)]), OrderedDict([('onset_time', 153.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 154.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 154.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 3.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 158.0), ('stim_type', 2), ('stim_name', 'bright'), ('trial_length', 7.5), ('stim_size', 1.6), ('RGB', [0.78, 0.61, 0.7]), ('corrAns', None)]), OrderedDict([('onset_time', 165.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 166.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 4.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 170.0), ('stim_type', 2), ('stim_name', 'bright'), ('trial_length', 2.5), ('stim_size', 1.6), ('RGB', [0.78, 0.61, 0.7]), ('corrAns', None)]), OrderedDict([('onset_time', 172.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 6.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 178.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 1.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 179.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 4.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 183.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 2.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 186.0), ('stim_type', 1), ('stim_name', 'targ'), ('trial_length', 0.5), ('stim_size', 3.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', 1.0)]), OrderedDict([('onset_time', 186.5), ('stim_type', 1), ('stim_name', 'targ'), ('trial_length', 1.5), ('stim_size', 3.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', 1.0)]), OrderedDict([('onset_time', 188.0), ('stim_type', 1), ('stim_name', 'targ'), ('trial_length', 1.0), ('stim_size', 3.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', 1.0)]), OrderedDict([('onset_time', 189.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 3.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 192.5), ('stim_type', 2), ('stim_name', 'bright'), ('trial_length', 4.5), ('stim_size', 1.6), ('RGB', [0.78, 0.61, 0.7]), ('corrAns', None)]), OrderedDict([('onset_time', 197.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 197.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 11.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 208.5), ('stim_type', 2), ('stim_name', 'bright'), ('trial_length', 1.0), ('stim_size', 1.6), ('RGB', [0.78, 0.61, 0.7]), ('corrAns', None)]), OrderedDict([('onset_time', 209.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 1.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 210.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 1.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 212.0), ('stim_type', 1), ('stim_name', 'targ'), ('trial_length', 0.5), ('stim_size', 3.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', 1.0)]), OrderedDict([('onset_time', 212.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 213.0), ('stim_type', 1), ('stim_name', 'targ'), ('trial_length', 1.5), ('stim_size', 3.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', 1.0)]), OrderedDict([('onset_time', 214.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 215.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 2.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 217.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 1.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 218.0), ('stim_type', 1), ('stim_name', 'targ'), ('trial_length', 1.0), ('stim_size', 3.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', 1.0)]), OrderedDict([('onset_time', 219.0), ('stim_type', 2), ('stim_name', 'bright'), ('trial_length', 3.0), ('stim_size', 1.6), ('RGB', [0.78, 0.61, 0.7]), ('corrAns', None)]), OrderedDict([('onset_time', 222.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 1.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 223.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 2.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 225.5), ('stim_type', 2), ('stim_name', 'bright'), ('trial_length', 4.5), ('stim_size', 1.6), ('RGB', [0.78, 0.61, 0.7]), ('corrAns', None)]), OrderedDict([('onset_time', 230.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 230.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 1.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 231.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 1.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 232.5), ('stim_type', 1), ('stim_name', 'targ'), ('trial_length', 2.5), ('stim_size', 3.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', 1.0)]), OrderedDict([('onset_time', 235.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 3.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 238.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 239.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 239.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 240.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 240.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 2.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 243.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 1.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 244.5), ('stim_type', 2), ('stim_name', 'bright'), ('trial_length', 2.0), ('stim_size', 1.6), ('RGB', [0.78, 0.61, 0.7]), ('corrAns', None)]), OrderedDict([('onset_time', 246.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 247.0), ('stim_type', 1), ('stim_name', 'targ'), ('trial_length', 2.0), ('stim_size', 3.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', 1.0)]), OrderedDict([('onset_time', 249.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 1.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 250.5), ('stim_type', 1), ('stim_name', 'targ'), ('trial_length', 3.5), ('stim_size', 3.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', 1.0)]), OrderedDict([('onset_time', 254.0), ('stim_type', 1), ('stim_name', 'targ'), ('trial_length', 1.0), ('stim_size', 3.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', 1.0)]), OrderedDict([('onset_time', 255.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 5.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 260.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 2.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 262.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 1.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 263.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 1.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 265.0), ('stim_type', 2), ('stim_name', 'bright'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.78, 0.61, 0.7]), ('corrAns', None)]), OrderedDict([('onset_time', 265.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 1.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 267.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 5.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 272.5), ('stim_type', 1), ('stim_name', 'targ'), ('trial_length', 1.0), ('stim_size', 3.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', 1.0)]), OrderedDict([('onset_time', 273.5), ('stim_type', 2), ('stim_name', 'bright'), ('trial_length', 2.0), ('stim_size', 1.6), ('RGB', [0.78, 0.61, 0.7]), ('corrAns', None)]), OrderedDict([('onset_time', 275.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 1.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 276.5), ('stim_type', 2), ('stim_name', 'bright'), ('trial_length', 1.0), ('stim_size', 1.6), ('RGB', [0.78, 0.61, 0.7]), ('corrAns', None)]), OrderedDict([('onset_time', 277.5), ('stim_type', 2), ('stim_name', 'bright'), ('trial_length', 4.5), ('stim_size', 1.6), ('RGB', [0.78, 0.61, 0.7]), ('corrAns', None)]), OrderedDict([('onset_time', 282.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 1.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 283.5), ('stim_type', 2), ('stim_name', 'bright'), ('trial_length', 1.0), ('stim_size', 1.6), ('RGB', [0.78, 0.61, 0.7]), ('corrAns', None)]), OrderedDict([('onset_time', 284.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 1.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 285.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 286.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 286.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 2.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 289.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 289.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 4.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 293.5), ('stim_type', 1), ('stim_name', 'targ'), ('trial_length', 4.0), ('stim_size', 3.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', 1.0)]), OrderedDict([('onset_time', 297.5), ('stim_type', 1), ('stim_name', 'targ'), ('trial_length', 0.5), ('stim_size', 3.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', 1.0)]), OrderedDict([('onset_time', 298.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 4.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 302.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 3.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 305.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 305.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 1.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 306.5), ('stim_type', 1), ('stim_name', 'targ'), ('trial_length', 2.0), ('stim_size', 3.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', 1.0)]), OrderedDict([('onset_time', 308.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 309.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 6.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 315.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 315.5), ('stim_type', 2), ('stim_name', 'bright'), ('trial_length', 6.0), ('stim_size', 1.6), ('RGB', [0.78, 0.61, 0.7]), ('corrAns', None)]), OrderedDict([('onset_time', 321.5), ('stim_type', 2), ('stim_name', 'bright'), ('trial_length', 1.5), ('stim_size', 1.6), ('RGB', [0.78, 0.61, 0.7]), ('corrAns', None)]), OrderedDict([('onset_time', 323.0), ('stim_type', 2), ('stim_name', 'bright'), ('trial_length', 3.5), ('stim_size', 1.6), ('RGB', [0.78, 0.61, 0.7]), ('corrAns', None)]), OrderedDict([('onset_time', 326.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 1.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 328.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 328.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 1.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 330.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 1.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 331.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 3.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 334.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 1.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 336.0), ('stim_type', 1), ('stim_name', 'targ'), ('trial_length', 1.5), ('stim_size', 3.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', 1.0)]), OrderedDict([('onset_time', 337.5), ('stim_type', 1), ('stim_name', 'targ'), ('trial_length', 4.0), ('stim_size', 3.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', 1.0)]), OrderedDict([('onset_time', 341.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 3.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 344.5), ('stim_type', 1), ('stim_name', 'targ'), ('trial_length', 2.0), ('stim_size', 3.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', 1.0)]), OrderedDict([('onset_time', 346.5), ('stim_type', 1), ('stim_name', 'targ'), ('trial_length', 1.0), ('stim_size', 3.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', 1.0)]), OrderedDict([('onset_time', 347.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 1.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 348.5), ('stim_type', 1), ('stim_name', 'targ'), ('trial_length', 2.0), ('stim_size', 3.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', 1.0)]), OrderedDict([('onset_time', 350.5), ('stim_type', 2), ('stim_name', 'bright'), ('trial_length', 3.0), ('stim_size', 1.6), ('RGB', [0.78, 0.61, 0.7]), ('corrAns', None)]), OrderedDict([('onset_time', 353.5), ('stim_type', 2), ('stim_name', 'bright'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.78, 0.61, 0.7]), ('corrAns', None)]), OrderedDict([('onset_time', 354.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 5.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 359.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 360.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 3.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 363.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 1.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 364.0), ('stim_type', 1), ('stim_name', 'targ'), ('trial_length', 1.0), ('stim_size', 3.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', 1.0)]), OrderedDict([('onset_time', 365.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 365.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 366.0), ('stim_type', 1), ('stim_name', 'targ'), ('trial_length', 1.5), ('stim_size', 3.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', 1.0)]), OrderedDict([('onset_time', 367.5), ('stim_type', 1), ('stim_name', 'targ'), ('trial_length', 1.5), ('stim_size', 3.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', 1.0)]), OrderedDict([('onset_time', 369.0), ('stim_type', 2), ('stim_name', 'bright'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.78, 0.61, 0.7]), ('corrAns', None)]), OrderedDict([('onset_time', 369.5), ('stim_type', 2), ('stim_name', 'bright'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.78, 0.61, 0.7]), ('corrAns', None)]), OrderedDict([('onset_time', 370.0), ('stim_type', 1), ('stim_name', 'targ'), ('trial_length', 2.0), ('stim_size', 3.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', 1.0)]), OrderedDict([('onset_time', 372.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 372.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 2.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 375.0), ('stim_type', 2), ('stim_name', 'bright'), ('trial_length', 2.5), ('stim_size', 1.6), ('RGB', [0.78, 0.61, 0.7]), ('corrAns', None)]), OrderedDict([('onset_time', 377.5), ('stim_type', 2), ('stim_name', 'bright'), ('trial_length', 1.5), ('stim_size', 1.6), ('RGB', [0.78, 0.61, 0.7]), ('corrAns', None)]), OrderedDict([('onset_time', 379.0), ('stim_type', 1), ('stim_name', 'targ'), ('trial_length', 3.5), ('stim_size', 3.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', 1.0)]), OrderedDict([('onset_time', 382.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 1.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 383.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 1.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 385.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 1.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 386.0), ('stim_type', 2), ('stim_name', 'bright'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.78, 0.61, 0.7]), ('corrAns', None)]), OrderedDict([('onset_time', 386.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 5.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 391.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 392.0), ('stim_type', 2), ('stim_name', 'bright'), ('trial_length', 2.0), ('stim_size', 1.6), ('RGB', [0.78, 0.61, 0.7]), ('corrAns', None)]), OrderedDict([('onset_time', 394.0), ('stim_type', 2), ('stim_name', 'bright'), ('trial_length', 2.0), ('stim_size', 1.6), ('RGB', [0.78, 0.61, 0.7]), ('corrAns', None)]), OrderedDict([('onset_time', 396.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 3.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 399.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 1.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 400.5), ('stim_type', 1), ('stim_name', 'targ'), ('trial_length', 2.0), ('stim_size', 3.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', 1.0)]), OrderedDict([('onset_time', 402.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 1.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 403.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 2.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 406.0), ('stim_type', 1), ('stim_name', 'targ'), ('trial_length', 0.5), ('stim_size', 3.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', 1.0)]), OrderedDict([('onset_time', 406.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 407.0), ('stim_type', 2), ('stim_name', 'bright'), ('trial_length', 1.5), ('stim_size', 1.6), ('RGB', [0.78, 0.61, 0.7]), ('corrAns', None)]), OrderedDict([('onset_time', 408.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 409.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 409.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 410.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 1.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 411.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 411.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 412.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 7.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 419.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 2.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 421.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 1.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 422.5), ('stim_type', 2), ('stim_name', 'bright'), ('trial_length', 2.5), ('stim_size', 1.6), ('RGB', [0.78, 0.61, 0.7]), ('corrAns', None)]), OrderedDict([('onset_time', 425.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 3.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 428.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 1.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 430.0), ('stim_type', 2), ('stim_name', 'bright'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.78, 0.61, 0.7]), ('corrAns', None)]), OrderedDict([('onset_time', 430.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 431.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 1.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 432.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 432.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 3.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 435.5), ('stim_type', 2), ('stim_name', 'bright'), ('trial_length', 4.5), ('stim_size', 1.6), ('RGB', [0.78, 0.61, 0.7]), ('corrAns', None)]), OrderedDict([('onset_time', 440.0), ('stim_type', 1), ('stim_name', 'targ'), ('trial_length', 4.0), ('stim_size', 3.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', 1.0)]), OrderedDict([('onset_time', 444.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 1.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 445.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 1.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 446.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 447.0), ('stim_type', 2), ('stim_name', 'bright'), ('trial_length', 2.0), ('stim_size', 1.6), ('RGB', [0.78, 0.61, 0.7]), ('corrAns', None)]), OrderedDict([('onset_time', 449.0), ('stim_type', 1), ('stim_name', 'targ'), ('trial_length', 0.5), ('stim_size', 3.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', 1.0)]), OrderedDict([('onset_time', 449.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 1.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 450.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 2.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 453.0), ('stim_type', 1), ('stim_name', 'targ'), ('trial_length', 0.5), ('stim_size', 3.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', 1.0)]), OrderedDict([('onset_time', 453.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 4.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 458.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 1.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 459.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 1.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 460.0), ('stim_type', 2), ('stim_name', 'bright'), ('trial_length', 1.5), ('stim_size', 1.6), ('RGB', [0.78, 0.61, 0.7]), ('corrAns', None)]), OrderedDict([('onset_time', 461.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 1.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 462.5), ('stim_type', 2), ('stim_name', 'bright'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.78, 0.61, 0.7]), ('corrAns', None)]), OrderedDict([('onset_time', 463.0), ('stim_type', 1), ('stim_name', 'targ'), ('trial_length', 0.5), ('stim_size', 3.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', 1.0)]), OrderedDict([('onset_time', 463.5), ('stim_type', 1), ('stim_name', 'targ'), ('trial_length', 0.5), ('stim_size', 3.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', 1.0)]), OrderedDict([('onset_time', 464.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 3.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 467.0), ('stim_type', 2), ('stim_name', 'bright'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.78, 0.61, 0.7]), ('corrAns', None)]), OrderedDict([('onset_time', 467.5), ('stim_type', 2), ('stim_name', 'bright'), ('trial_length', 7.5), ('stim_size', 1.6), ('RGB', [0.78, 0.61, 0.7]), ('corrAns', None)]), OrderedDict([('onset_time', 475.0), ('stim_type', 1), ('stim_name', 'targ'), ('trial_length', 8.0), ('stim_size', 3.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', 1.0)]), OrderedDict([('onset_time', 483.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 2.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 485.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 2.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 487.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 1.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 488.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 2.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 491.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 2.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 493.0), ('stim_type', 1), ('stim_name', 'targ'), ('trial_length', 2.0), ('stim_size', 3.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', 1.0)]), OrderedDict([('onset_time', 495.0), ('stim_type', 1), ('stim_name', 'targ'), ('trial_length', 0.5), ('stim_size', 3.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', 1.0)]), OrderedDict([('onset_time', 495.5), ('stim_type', 1), ('stim_name', 'targ'), ('trial_length', 6.0), ('stim_size', 3.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', 1.0)]), OrderedDict([('onset_time', 501.5), ('stim_type', 1), ('stim_name', 'targ'), ('trial_length', 0.5), ('stim_size', 3.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', 1.0)]), OrderedDict([('onset_time', 502.0), ('stim_type', 1), ('stim_name', 'targ'), ('trial_length', 4.5), ('stim_size', 3.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', 1.0)]), OrderedDict([('onset_time', 506.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 3.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 509.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 5.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 515.0), ('stim_type', 2), ('stim_name', 'bright'), ('trial_length', 1.5), ('stim_size', 1.6), ('RGB', [0.78, 0.61, 0.7]), ('corrAns', None)]), OrderedDict([('onset_time', 516.5), ('stim_type', 1), ('stim_name', 'targ'), ('trial_length', 0.5), ('stim_size', 3.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', 1.0)]), OrderedDict([('onset_time', 517.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 2.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 519.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 8.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 527.5), ('stim_type', 1), ('stim_name', 'targ'), ('trial_length', 3.0), ('stim_size', 3.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', 1.0)]), OrderedDict([('onset_time', 530.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 2.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 533.0), ('stim_type', 2), ('stim_name', 'bright'), ('trial_length', 4.0), ('stim_size', 1.6), ('RGB', [0.78, 0.61, 0.7]), ('corrAns', None)]), OrderedDict([('onset_time', 537.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 2.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 539.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 3.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 542.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 543.0), ('stim_type', 1), ('stim_name', 'targ'), ('trial_length', 1.0), ('stim_size', 3.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', 1.0)]), OrderedDict([('onset_time', 544.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 544.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 1.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 545.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 546.0), ('stim_type', 1), ('stim_name', 'targ'), ('trial_length', 0.5), ('stim_size', 3.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', 1.0)]), OrderedDict([('onset_time', 546.5), ('stim_type', 1), ('stim_name', 'targ'), ('trial_length', 0.5), ('stim_size', 3.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', 1.0)]), OrderedDict([('onset_time', 547.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 7.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 554.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 2.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 556.5), ('stim_type', 2), ('stim_name', 'bright'), ('trial_length', 1.5), ('stim_size', 1.6), ('RGB', [0.78, 0.61, 0.7]), ('corrAns', None)]), OrderedDict([('onset_time', 558.0), ('stim_type', 1), ('stim_name', 'targ'), ('trial_length', 3.5), ('stim_size', 3.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', 1.0)]), OrderedDict([('onset_time', 561.5), ('stim_type', 2), ('stim_name', 'bright'), ('trial_length', 2.0), ('stim_size', 1.6), ('RGB', [0.78, 0.61, 0.7]), ('corrAns', None)]), OrderedDict([('onset_time', 563.5), ('stim_type', 1), ('stim_name', 'targ'), ('trial_length', 0.5), ('stim_size', 3.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', 1.0)]), OrderedDict([('onset_time', 564.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 2.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 566.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 2.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 568.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 569.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 3.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 572.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 1.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 574.0), ('stim_type', 2), ('stim_name', 'bright'), ('trial_length', 4.0), ('stim_size', 1.6), ('RGB', [0.78, 0.61, 0.7]), ('corrAns', None)]), OrderedDict([('onset_time', 578.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 2.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 580.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 3.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 583.0), ('stim_type', 1), ('stim_name', 'targ'), ('trial_length', 1.5), ('stim_size', 3.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', 1.0)]), OrderedDict([('onset_time', 584.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 585.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 1.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 586.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 3.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 590.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 590.5), ('stim_type', 2), ('stim_name', 'bright'), ('trial_length', 1.5), ('stim_size', 1.6), ('RGB', [0.78, 0.61, 0.7]), ('corrAns', None)]), OrderedDict([('onset_time', 592.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 592.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 1.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 593.5), ('stim_type', 2), ('stim_name', 'bright'), ('trial_length', 2.5), ('stim_size', 1.6), ('RGB', [0.78, 0.61, 0.7]), ('corrAns', None)]), OrderedDict([('onset_time', 596.0), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 0.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 596.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', 1.0), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)]), OrderedDict([('onset_time', 597.5), ('stim_type', 3), ('stim_name', 'nontarg'), ('trial_length', -597.5), ('stim_size', 1.6), ('RGB', [0.7298, 0.5623, 0.6473]), ('corrAns', None)])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="conditions.csv" valType="str"/>
      <Param name="endPoints" updates="None" val="[1, 2]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="trial"/>
    <LoopTerminator name="trials"/>
    <Routine name="eyelinkStopRecording"/>
    <Routine name="thanks"/>
  </Flow>
</PsychoPy2experiment>
